stages:
  - build
  - test
  - push
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  BACKEND_IMAGE: $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA
  FRONTEND_IMAGE: $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA

# Stage 1: Build - بناء الـ Docker Images
build_backend:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - docker build -t $BACKEND_IMAGE .
    - docker push $BACKEND_IMAGE
  only:
    - main
    - develop

build_frontend:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - docker build -t $FRONTEND_IMAGE .
    - docker push $FRONTEND_IMAGE
  only:
    - main
    - develop

# Stage 2: Test - اختبار الكود
test_backend:
  stage: test
  image: python:3.11
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    key: pip-cache
    paths:
      - .cache/pip
  script:
    - echo "PWD:" && pwd
    - ls -la
    - test -f backend/requirements.txt || (echo "❌ backend/requirements.txt missing!" && exit 42)
    - pip install --upgrade pip
    - pip install -r backend/requirements.txt
    # لو عندك اختبارات pytest شغّلها، لو لأ هنعدّي
    - pip install pytest || true
    - pytest -q || echo "No pytest tests found, skipping"
  only:
    - main
    - develop

test_frontend:
  stage: test
  image: node:18
  script:
    - cd frontend
    - npm install
    - npm run test || echo "No tests found"
  only:
    - main
    - develop

# Stage 3: Push - رفع الـ Images للـ Registry
push_images:
  stage: push
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # Tag as latest
    - docker pull $BACKEND_IMAGE
    - docker tag $BACKEND_IMAGE $CI_REGISTRY_IMAGE/backend:latest
    - docker push $CI_REGISTRY_IMAGE/backend:latest
    
    - docker pull $FRONTEND_IMAGE
    - docker tag $FRONTEND_IMAGE $CI_REGISTRY_IMAGE/frontend:latest
    - docker push $CI_REGISTRY_IMAGE/frontend:latest
  only:
    - main

# Stage 4: Deploy - نشر على Kubernetes
deploy_to_k8s:
  stage: deploy
  image: bitnami/kubectl:latest
  before_script:
    - mkdir -p ~/.kube
    - echo "$KUBECONFIG_CONTENT" > ~/.kube/config
  script:
    # تحديث الـ images في Kubernetes
    - kubectl set image deployment/backend backend=$BACKEND_IMAGE -n default
    - kubectl set image deployment/frontend frontend=$FRONTEND_IMAGE -n default
    
    # انتظار اكتمال الـ rollout
    - kubectl rollout status deployment/backend -n default
    - kubectl rollout status deployment/frontend -n default
    
    # عرض حالة الـ pods
    - kubectl get pods -n default
  only:
    - main
  when: manual  # يتطلب موافقة يدوية
