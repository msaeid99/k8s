stages:
  - build
  - test
  - push
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  BACKEND_IMAGE: $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA
  FRONTEND_IMAGE: $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA

# Stage 1: Build - بناء الـ Docker Images
build_backend:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - docker build -t $BACKEND_IMAGE .
    - docker push $BACKEND_IMAGE
  only:
    - main
    - develop

build_frontend:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - docker build -t $FRONTEND_IMAGE .
    - docker push $FRONTEND_IMAGE
  only:
    - main
    - develop

# Stage 2: Test - اختبار الكود
test_backend:
  stage: test
  image: python:3.11
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    key: pip-cache
    paths:
      - .cache/pip
  script:
    - echo "PWD:" && pwd
    - ls -la
    - test -f backend/requirements.txt || (echo "❌ backend/requirements.txt missing!" && exit 42)
    - pip install --upgrade pip
    - pip install -r backend/requirements.txt
    # لو عندك اختبارات pytest شغّلها، لو لأ هنعدّي
    - pip install pytest || true
    - pytest -q || echo "No pytest tests found, skipping"
  only:
    - main
    - develop

test_frontend:
  stage: test
  image: node:18
  script:
    - cd frontend
    - npm install
    - npm run test || echo "No tests found"
  only:
    - main
    - develop

# Stage 3: Push - رفع الـ Images للـ Registry
push_images:
  stage: push
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # Tag as latest
    - docker pull $BACKEND_IMAGE
    - docker tag $BACKEND_IMAGE $CI_REGISTRY_IMAGE/backend:latest
    - docker push $CI_REGISTRY_IMAGE/backend:latest
    
    - docker pull $FRONTEND_IMAGE
    - docker tag $FRONTEND_IMAGE $CI_REGISTRY_IMAGE/frontend:latest
    - docker push $CI_REGISTRY_IMAGE/frontend:latest
  only:
    - main

# ===== Stage 4: Deploy - نشر على Kubernetes =====
deploy_to_k8s:
  stage: deploy
  tags:
    - minikube-local         # لو ده Runner محلي لكن الكلاستر حقيقي، مفيش مشكلة
  image:
    name: bitnami/kubectl:1.30   # ثبّت النسخة لتفادي تغيّرات breaking
    entrypoint: [""]
  only:
    - main
  when: manual
  variables:
    KUBE_NAMESPACE: "default"
    ROLLOUT_TIMEOUT: "300s"
  script:
    - |
      set -euo pipefail

      # اكتب kubeconfig من سيكرت (أفضل من الاعتماد على مسار محلي)
      # خزّن kubeconfig كـ Base64 في متغير GitLab اسمه KUBECONFIG_DATA
      if [ -n "${KUBECONFIG_DATA:-}" ]; then
        echo "$KUBECONFIG_DATA" | base64 -d > kubeconfig
        export KUBECONFIG="$PWD/kubeconfig"
      else
        # fallback لو انت مصر تستخدم ملف محلي على السيرفر
        export KUBECONFIG=${KUBECONFIG:-/home/gitlab-runner/.kube/config}
      fi

      NS="${KUBE_NAMESPACE}"

      # دباگ تلقائي عند أي ERR
      failure_debug() {
        echo "------ DEBUG (namespace: $NS) ------"
        kubectl -n "$NS" get all || true
        echo "------ Events (last 100) ------"
        kubectl -n "$NS" get events --sort-by=.lastTimestamp | tail -n 100 || true
        for dep in backend frontend; do
          kubectl -n "$NS" get deploy "$dep" >/dev/null 2>&1 && kubectl -n "$NS" describe deploy "$dep" || true
          pods=$(kubectl -n "$NS" get pods -l app="$dep" -o name 2>/dev/null || true)
          for p in $pods; do
            echo "---- logs $p ----"
            kubectl -n "$NS" logs "$p" --all-containers=true --tail=200 || true
          done
        done
      }
      trap 'failure_debug' ERR

      echo "🔍 Checking Kubernetes cluster..."
      kubectl version --short
      kubectl cluster-info
      kubectl get nodes -o wide

      # اتأكد إن الـ Namespace موجود
      kubectl get ns "$NS" >/dev/null 2>&1 || kubectl create ns "$NS"

      echo "🚀 Deploying images..."
      # غيّر الصور لو المتغيرات متعرفة
      if [ -n "${BACKEND_IMAGE:-}" ] && kubectl -n "$NS" get deploy backend >/dev/null 2>&1; then
        kubectl -n "$NS" set image deployment/backend backend="$BACKEND_IMAGE"
      else
        echo "ℹ️ BACKEND_IMAGE not set or deployment/backend not found — skipping"
      fi

      if [ -n "${FRONTEND_IMAGE:-}" ] && kubectl -n "$NS" get deploy frontend >/dev/null 2>&1; then
        kubectl -n "$NS" set image deployment/frontend frontend="$FRONTEND_IMAGE"
      else
        echo "ℹ️ FRONTEND_IMAGE not set or deployment/frontend not found — skipping"
      fi

      echo "⏳ Waiting for rollout..."
      kubectl -n "$NS" get deploy backend   >/dev/null 2>&1 && kubectl -n "$NS" rollout status deploy/backend   --timeout="$ROLLOUT_TIMEOUT" || true
      kubectl -n "$NS" get deploy frontend  >/dev/null 2>&1 && kubectl -n "$NS" rollout status deploy/frontend  --timeout="$ROLLOUT_TIMEOUT" || true

      echo "✅ Deployment completed!"
      kubectl -n "$NS" get deploy,svc,ingress -o wide
      kubectl -n "$NS" get pods -o wide
      echo "🎉 Done."
